#!/usr/bin/env bash
#Defining PATH for commands
export PATH=$PATH:/usr/bin
# Setting Start time counter(seconds):
START_TIME=$SECONDS

#################################################
#EDIT THIS SECTION
#################################################

# WARNING: CHECK FOR NO TRAILING "/" IN THE PATHES!
# WARNING: nfs-utils(for NFS mounting) & mysqldump(for mysql backup) must be installed

##### Define MYAPP & HOST names #####
MYAPP="MYAPP"
HOST=$(hostname)

##### Define Backup Locations Section #####
#(Re)Mount NFS dir, edit your storage details
### Mount NFS: "yes"/"no" ###
MOUNT_NFS="yes"
# NFS Mount Point or Local Dir for Local Backups if MOUNT_NFS="no"
BACKUP_MOUNT=/mnt
# Change nfs ip and export path accordingly
NFS_IP=<your_nfs_ip>
NFS_EXPORT_PATH=/YOUR_NFS_EXPORT_PATH
############################################

##### Logging Section(LOG_DIR must exists) #####
# WARNING: Change BACKUP_LOGS accordingly or leave it be
LOG_DIR=/var/log/$MYAPP/BACKUP_LOGS
# Keep last <num> logs
KEEP_LOGS_NUM=30
# Change MYBACKUP_backup-script to accordingly;
# $(date +%F) adds Date like yyyy-mm-dd in the name of a log
LOG_NAME=$LOG_DIR/$HOST-backup-script_$(date +%F).log
#Start logging
##############################################

##### Objects to backup#####
### Backup mysql db: "yes"/"no" ###
MYSQL_BACKUP="no"
#DB data
DB_NAME=mydb
DB_USER=root
DB_PASSWORD="password"
#Gzip using: yes/no
USE_GZIP="yes"
#Define dump file name w/wo gzip
# WARNING: change only everything between $DB_NAME- and .sql
DB_DUMP_FILE=$HOST-$DB_NAME-$(date +%F).sql

### Backup files/dirs: "yes"/"no" ###
FILES_BACKUP="yes"
#File dir(s)
#For several dirs use form with quotes: FILE_DIR=(/dir1 /dir2)
FILE_DIR=(/etc /var/opt)
#TAR filename for files archive, dont't touch .tar.gz
TAR_ARCHIVE_NAME=$HOST-files_$(date +%F).tar.gz

# Backups Rotation: define Number of backup files to keep for each type of backup: monthly/weekly/daily
NUMBER_OF_MONTHLY_BACKUPS=3
NUMBER_OF_WEEKLY_BACKUPS=4
NUMBER_OF_DAILY_BACKUPS=7

#################################################
#NO NEED TO EDIT FURTHER
##################################################

# Backup Dir(Local or NFS)
ROOT_BACKUP_DIR=/$MYAPP/$HOST
BACKUP_PATH=$BACKUP_MOUNT/$ROOT_BACKUP_DIR

# Creating Log dir
mkdir -p "$LOG_DIR"

MYSQLDUMP_INSTALLED=$(which mysqldump 2>/dev/null)
NFSCLIENT_INSTALLED=$(which mount.nfs 2>/dev/null)

# Write STDOUT and STDERR in LOG_NAME; comment it for DEBUG!
exec 1>"$LOG_NAME" 2>&1

#DoM is Day of Month
DoM=$(date +%d)
#DoW is Day of Week
DoW=$(date +%u)

#Inserting date in log
echo "##################"
echo "Starting new backup job..."
date
echo "MySQL Backup is set to: $MYSQL_BACKUP"
echo "Files Backup is set to: $FILES_BACKUP"
echo "NFS mount set to: $MOUNT_NFS"

# Checking Mysqldum installed:
if [ "$MYSQL_BACKUP" = "yes" ]; then
  if [ "$MYSQLDUMP_INSTALLED" != "" ]; then
    MYSQLDUMP_IS_POSSIBLE="yes"
    echo "Checking mysqldump installed..."
    echo "Mysqldump installed - OK"
    echo ""
  else
    MYSQLDUMP_IS_POSSIBLE="no"
    echo "Mysqldump installed - NO"
    echo "MySQL backup is impossible fix it to proceed..."
    echo ""
  fi
elif [ "$MYSQL_BACKUP" = "no" ]; then
  MYSQLDUMP_IS_POSSIBLE="no"
  echo ""
else
  MYSQLDUMP_IS_POSSIBLE="no"
  echo "Check MYSQL_BACKUP variable: yes/no is only acceptable!"
  echo "Skipping MySQL - $BACKUP_TYPE - backup..."
  echo ""
fi

# Checking mount.nfs installed
if [ "$MOUNT_NFS" = "yes" ]; then
  echo "Checking NFS client installed..."
  if [ "$NFSCLIENT_INSTALLED" != "" ]; then
    echo "NFS Client installed - OK"
  else
    echo "NFS Client installed - NO"
    echo "Backup Failed!"
    echo ""
    exit 1
  fi
  if mount -t nfs $NFS_IP:/$NFS_EXPORT_PATH "$BACKUP_MOUNT"; then
    echo "Mounting NFS is OK!"
    echo ""
  else
    echo "Mounting NFS was FAILED, abort execution!"
    echo "Backup Failed!"
    echo ""
    exit 1
  fi
  if mkdir -p "$BACKUP_PATH"; then
    echo "Checking backup dir - OK"
    echo ""
  else
    echo "Creating backup dir for NFS was failed, abort execution!"
    echo "Backup Failed!"
    echo ""
    exit 1
  fi
elif [ "$MOUNT_NFS" = "no" ]; then
  echo "NFS not needed, using Local backup dir..."
  echo "Checking local backup dir..."
  if mkdir -p "$BACKUP_PATH"; then
    echo "Local backup dir - OK"
    echo ""
  else
    echo "Creating local backup dir was failed, abort execution!"
    echo "Backup Failed!"
    echo ""
    exit 1
  fi
else
  echo "Check MOUNT_NFS variable: yes/no is only acceptable!"
  echo "Backup Failed!"
  exit 1
fi

#Define current date backup dir
CURRENT_DATE_BACKUP_DIR=$(date +%F)

##### Backup MySQL DB function #####
function make_backup_mysql () {
  if [ $# -ne 1 ]; then
    echo "Something wrong with parameters in backup-rotation functions."
    echo "There must be only 1 param: Monthly/Weekly/Daily"
    echo "MySQL Backup FAILED!"
    echo ""
    return
  fi
  # Backup Type must be: Monthly/Weekly/Daily
  BACKUP_TYPE=$1
  CURRENT_DATE_BACKUP_PATH=$BACKUP_PATH/"$BACKUP_TYPE"/$CURRENT_DATE_BACKUP_DIR
  BACKUP_PATH_TYPE=$BACKUP_PATH/"$BACKUP_TYPE"
  #DB backup
  if [ "$MYSQLDUMP_IS_POSSIBLE" = "yes" ]; then
    echo "Making MySQL DB - $BACKUP_TYPE - backup..."
    echo "Checking $BACKUP_TYPE backup dir..."
    if mkdir -p "$BACKUP_PATH"/"$BACKUP_TYPE"/"$CURRENT_DATE_BACKUP_DIR"; then
      echo "Backup Dir - OK"
    else
      echo "Failed to create Backup Dir"
      echo "MySQL Backup FAILED!"
      echo "Skipping MySQL - $BACKUP_TYPE - backup..."
      echo ""
      return
    fi
    echo "Making $BACKUP_TYPE mysqldump..."
    if [[ "$USE_GZIP" == "yes" ]]; then
      if mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" >"$CURRENT_DATE_BACKUP_PATH"/"$DB_DUMP_FILE"; then
        if gzip "$CURRENT_DATE_BACKUP_PATH"/"$DB_DUMP_FILE"; then
        echo "MySQL dump gziped OK"
        echo "$BACKUP_TYPE: SQL backup DONE!"
        echo ""
        else
          echo "$BACKUP_TYPE: SQL backup using gzip FAILED!"
          echo "Skipping MySQL - $BACKUP_TYPE - backup..."
          echo ""
          return
        fi
      else
        echo "$BACKUP_TYPE: SQL backup using gzip FAILED!"
        echo "Skipping MySQL - $BACKUP_TYPE - backup..."
        echo ""
        return
      fi
    else
      echo "No GZIP for MySQL backup..."
      if mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" >"$CURRENT_DATE_BACKUP_PATH"/"$DB_DUMP_FILE"; then
        echo "$BACKUP_TYPE: MySQL dump without gzip DONE!"
        echo ""
      else
        echo "$BACKUP_TYPE: MySQL dump FAILED"
        echo "Skipping MySQL - $BACKUP_TYPE - backup..."
        echo ""
        return
      fi
    fi
  fi
}

##### Backup Files function #####
function make_backup_files () {
  if [ $# -ne 1 ]; then
    echo "Something wrong with parameters in backup-rotation functions."
    echo "There must be only 1 param: Monthly/Weekly/Daily"
    echo "Files Backup FAILED!"
    echo ""
    return
  fi
  # Backup Type must be: Monthly/Weekly/Daily
  BACKUP_TYPE=$1
  CURRENT_DATE_BACKUP_PATH=$BACKUP_PATH/"$BACKUP_TYPE"/$CURRENT_DATE_BACKUP_DIR
  BACKUP_PATH_TYPE=$BACKUP_PATH/"$BACKUP_TYPE"
  # Files backup
  if [ "$FILES_BACKUP" = "yes" ]; then
    echo "Making Files - $BACKUP_TYPE - backup..."
    echo "Checking $BACKUP_TYPE backup dir..."
    if mkdir -p "$BACKUP_PATH"/"$BACKUP_TYPE"/"$CURRENT_DATE_BACKUP_DIR"; then
      echo "Backup Dir - OK"
    else
      echo "Failed to create Backup Dir"
      echo "Files Backup - $BACKUP_TYPE - FAILED!"
      echo "Skipping Files - $BACKUP_TYPE - backup..."
      echo ""
      return
    fi
    echo "Making $BACKUP_TYPE Tar archive of files..."
    if tar -czf "$CURRENT_DATE_BACKUP_PATH"/"$TAR_ARCHIVE_NAME" "${FILE_DIR[@]}" ; then
      echo "$BACKUP_TYPE: Files backup DONE!"
      echo ""
    else
      echo "$BACKUP_TYPE: Files backup FAILED!"
      echo "Skipping Files - $BACKUP_TYPE - backup..."
      echo ""
      return
    fi
  elif [ "$FILES_BACKUP" = "no" ]; then
    echo "Skipping Files - $BACKUP_TYPE - backup..."
    echo ""
  else
    echo "Check FILES_BACKUP variable: yes/no is only acceptable!"
    echo "$BACKUP_TYPE: Files backup FAILED!"
    echo "Skipping Files - $BACKUP_TYPE - backup..."
    echo ""
    return
  fi
}

##### Backup rotation function - keep only N files #####
function rotate_backups () {
  if [ $# -ne 2 ]; then
    echo "Something wrong with parameters in backup-rotation functions."
    echo "There must be only 2 params: 1)num. of files to keep; 2)path of backup files; 3) backup type(Monthly/Weekly/Daily)"
    echo "Skipping - $BACKUP_TYPE - Backups rotation"
    echo ""
    return
  fi
  NUMBER_OF_FILES_TO_KEEP=$1
  BACKUP_TYPE=$2
  BACKUP_PATH_TYPE=$BACKUP_PATH/"$BACKUP_TYPE"
  COUNTER=0
  IFS=$'\n' # adding posibilty to see file with spaces in name
  set -o noglob # adding posibilty to see file with spaces in name
  echo "Starting - $BACKUP_TYPE - Backups rotation..."
  for file in $(ls -t "$BACKUP_PATH_TYPE"); do
    if [ $COUNTER -lt "$NUMBER_OF_FILES_TO_KEEP" ]; then
       ((COUNTER++))
       continue
    fi
    if rm -vrf "${BACKUP_PATH_TYPE:?}"/"$file"; then
      echo "Deleting old file ($file) in logs dir..."
    else
      echo "Skipping Log rotation..."
      echo ""
    return
    fi
  done
  echo "$BACKUP_TYPE Backups rotation DONE!"
  echo ""
}

##### Log Rotate function #####
function rotate_logs () {
  if [ $# -ne 2 ]; then
    echo "Something wrong with parameters in log rotation functions."
    echo "There must be only 2 params: 1)num. of files to keep(KEEP_LOGS_NUM); 2)path of log files."
    echo "Log Rotation FAILED!"
    return
  fi
  NUMBER_OF_FILES_TO_KEEP=$1
  PATH_OF_LOGS=$2
  COUNTER=0
  IFS=$'\n' # adding posibilty to see file with spaces in name
  set -o noglob # adding posibilty to see file with spaces in name
  echo "Starting Logs rotation..."
  for file in $(ls -t "$PATH_OF_LOGS"); do
    if [ $COUNTER -lt "$NUMBER_OF_FILES_TO_KEEP" ]; then
      ((COUNTER++))
      continue
    fi
    echo "Deleting old file ($file) in logs dir..."
    if rm -vrf "${PATH_OF_LOGS:?}"/"$file"; then
      echo "Deleting old file ($file) in logs dir..."
    else
      echo "Skipping Log rotation..."
      echo ""
    return
    fi
  done
  echo "Log rotation DONE!"
  echo ""
}

##### Doing Backup #####
if [ "$MYSQL_BACKUP" = "yes" ]; then
  if [ "$DoM" -eq 01 ]; then
    make_backup_mysql Monthly
  fi

  if [ "$DoW" -eq 1 ]; then
      make_backup_mysql Weekly
  fi

  make_backup_mysql Daily
fi

if [ "$FILES_BACKUP" = "yes" ]; then
  if [ "$DoM" -eq 01 ]; then
    make_backup_files Monthly
  fi

  if [ "$DoW" -eq 1 ]; then
      make_backup_files Weekly
  fi
  make_backup_files Daily
fi

##### Doing Backups Rotation #####
if [ "$DoM" -eq 01 ]; then
    rotate_backups $NUMBER_OF_MONTHLY_BACKUPS Monthly
fi
if [ "$DoW" -eq 1 ]; then
    rotate_backups $NUMBER_OF_WEEKLY_BACKUPS Weekly
fi
rotate_backups $NUMBER_OF_DAILY_BACKUPS Daily

##### Rotating Logs #####
rotate_logs $KEEP_LOGS_NUM $LOG_DIR

######################################
echo "Backup Ok!"
ELAPSED_TIME=$((SECONDS - START_TIME))
echo "Elapsed time is - $ELAPSED_TIME seconds"
echo "################################"
echo ""

#####################################
##### Post backup action: #####
if [ "$MOUNT_NFS" = "yes" ]; then
  echo "Prepare to Unmounting NFS..."
  echo "################################"
  if umount "$BACKUP_MOUNT"; then
    echo "DEBUG: Unmounting NFS - OK"
  else
    echo "DEBUG: error while unmounting NFS"
  fi
else
  echo "NFS wasn't used, no need to unmount"
  echo ""
  echo "Copying Temp log to Log Dir..."
fi
