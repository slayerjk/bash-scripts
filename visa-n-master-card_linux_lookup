#!/usr/bin/env bash

### This is Visa/MasterCard Card Sensitive Data lookup script. ###

### !!! This is BASH script, so BASH must be installed.
### !!! For Solaris support "ggrep" util must be installed !!! ###
### !!! For Solaris support "gfind" util must be installed !!! ###
### !!! Script must be runnig under ROOT privileges ###
### !!! Remote share mount point must be in /etc/fstab(linux) / /etc/vfstab(solaris)

#Defining PATH for commands
export PATH=$PATH:/usr/bin

# Starting to count script elapsed time
START_TIME=$SECONDS

# Checking OS name
OS=$(uname -o)

#########################
# Edit this section
#########################

# Mount point(local of fstab entry
# If you're using remote share for reports choose "yes", otherwise "no"(use local) for REMOTE_SHARE
REMOTE_SHARE="yes"
# If REMOTE_SHARE="no", then you'll use LOCAL dir for reports
# If there is no such dir, script will try to create it
REPORTS_MOUNT="/atmddk"
REPORT_NAME=report_$(hostname)_$(date +%F).log

# Location for Card numbers lookup
LOOKUP_LOCATIONS="/"

# Exclude locations to search for Solaris/Linux
if [ "$OS" = "Solaris" ]; then
        # Solaris list
        EXCLUDE_LOCATIONS_SOLARIS=(-not -path "$REPORTS_MOUNT/*" -not -path '/boot/*' -not -path '/proc/*' -not -path '/bin/*' -not -path '/sbin/*' -not -path '/mnt/*' -not -path '/lib/*' -not -path '/dev/*' -not -path '/usr/lib/*' -not -path '/var/lib/*' -not -path '/platform/*' -not -path '/system/*' -not -path '/tmp/*')
else
        # Linux list
        EXCLUDE_LOCATIONS_LINUX=(-not -path "$REPORTS_MOUNT/*" -not -path '/boot/*' -not -path '/proc/*' -not -path '/bin/*' -not -path '/sbin/*' -not -path '/mnt/*' -not -path '/lib/*' -not -path '/lib64/*' -not -path '/sys/*' -not -path '/dev/*' -not -path '/run/*' -not -path '/usr/lib/*' -not -path '/usr/lib64/*' -not -path '/var/lib/*' -not -path '/tmp/*' -not -path '/var/ossec/queue/*')
fi

# Card number lookup variables(Visa & Master Card)
REGEXP_CN="[45][0-9]{3}(-|\s)[0-9]{4}(-|\s)[0-9]{4}(-|\s)[0-9]{4}"
REGEXP_FULL="[45][0-9]{15}\s[a-zA-Z]{1,}(/|\\\\|_|-|\s)[a-zA-Z]{1,}\s[0-9]{2}(/|\\\\|_|-|\s)[0-9]{2}\s[0-9]{3}"
# What option do you want to lookup:
# "cn_only" to lookup CardNumber only
# "full" to lookup Full Card Data only
# "both" to lookup Both options
LOOKUP_OPTION="both"

#######################
# DONT'T EDIT FURTHER #
#######################


# If using Local report storage
if [ "$REMOTE_SHARE" = "no" ]; then
        if [ ! -d "$REPORTS_MOUNT" ]; then
                mkdir -p "$REPORTS_MOUNT"
        fi
fi

# If using REMOTE_SHARE for reports
if [ "$REMOTE_SHARE" = "yes" ]; then
        if ! mount "$REPORTS_MOUNT"; then
                echo "Mounting REMOTE_SHARE - FAILED!"
                echo "SCRIPT FAILED! Terminating..."
                echo ""
                exit 1
        fi
fi

# Making report dir:
if [ ! -d "$REPORTS_MOUNT"/CN-Reports ]; then
        mkdir -p "$REPORTS_MOUNT"/CN-Reports
fi

REPORTS_ROOT="$REPORTS_MOUNT"/CN-Reports
CURRENT_DATE=$(hostname)_$(date +%F)

if [ ! -d "$REPORTS_ROOT"/"$CURRENT_DATE" ]; then
        mkdir -p "$REPORTS_ROOT"/"$CURRENT_DATE"
fi

CURRENT_DATE_REPORT_DIR="$REPORTS_ROOT"/"$CURRENT_DATE"

# REPORT/DEBUG settings
# Write STDOUT and STDERR in report; comment it for DEBUG!
TEMP_REPORT=/tmp/"$REPORT_NAME"
exec 1>>"$TEMP_REPORT" 2>&1

#Inserting details in report:
echo "#################################"
echo "Starting new Card numbers lookup!"
echo "Computer name is -  $(hostname)"
echo "Computer OS type is - $OS"

if [ "$OS" = "Solaris" ]; then
        echo "Computer IP is - $(ifconfig net0 | grep "inet" | awk '{print $2}')"
else
        echo "Computer ip is - $(hostname -I)"
fi

echo "Date is - $(date)"
echo "#################################"
echo ""

### Defining CN lookup function ###
function card_data_lookup() {
        LOOKUP_ARG=$1
        if [ "$LOOKUP_ARG" = "cn_only" ]; then
                REGEXP="$REGEXP_CN"
                echo "----------------------------------------------"
                echo "Starting Card Number Only lookup:"
                echo ""
        elif [ "$LOOKUP_ARG" = "full" ]; then
                REGEXP="$REGEXP_FULL"
                echo "----------------------------------------------"
                echo "Starting Card Full Data lookup:"
                echo ""
        fi

        # Counters for lookups
        COUNT_TOTAL=0

        # Lookup for Visa/MasterCard

        
                
        if [ "$OS" = "Solaris" ]; then
                while read -r file; do
                        var=$(ggrep -nosEI "$REGEXP" "$file")
                        if [ -n "$var" ]; then
                                echo "$file"
                                echo "$var"
                                echo ""
                                ((COUNT_TOTAL++))
                                # Making dir for evidence files
                                if [ ! -d "$CURRENT_DATE_REPORT_DIR"/evidences ]; then
                                        mkdir -p "$CURRENT_DATE_REPORT_DIR"/evidences
                                fi
                        cp "$file" "$CURRENT_DATE_REPORT_DIR"/evidences
                        else
                                continue
                        fi
                done < <(gfind "$LOOKUP_LOCATIONS" "${EXCLUDE_LOCATIONS_SOLARIS[@]}" -type f)
                
                
        else
                while read -r file; do
                        var=$(grep -nosEI "$REGEXP" "$file")
                        if [ -n "$var" ]; then
                                echo "$file"
                                echo "$var"
                                echo ""
                                ((COUNT_TOTAL++))
                                # Making dir for evidence files
                                if [ ! -d "$CURRENT_DATE_REPORT_DIR"/evidences ]; then
                                        mkdir -p "$CURRENT_DATE_REPORT_DIR"/evidences
                                fi
                                cp "$file" "$CURRENT_DATE_REPORT_DIR"/evidences
                        else
                                continue
                        fi
                done < <(find "$LOOKUP_LOCATIONS" "${EXCLUDE_LOCATIONS_LINUX[@]}" -type f)
        fi

        # Calculating number of files with Card numbers:
        if [[ "$COUNT_TOTAL" -eq 0 ]]; then
                echo "Data hasn't been found!"
                echo ""
        else
                if [ "$LOOKUP_ARG" = "cn_only" ]; then
                        echo "Card Numbers was found in $COUNT_TOTAL files!"
                        echo "----------------------------------------------"
                        echo ""
                elif [ "$LOOKUP_ARG" = "full" ]; then
                        echo "Full Card Data was found in $COUNT_TOTAL files!"
                        echo "----------------------------------------------"
                fi
        fi
}

### Now call function
# First check LOOKUP_OPTION
case "$LOOKUP_OPTION" in

"both")
        card_data_lookup "cn_only"
        card_data_lookup "full"
        ;;

"cn_only")
        card_data_lookup "cn_only"
        ;;

"full")
        card_data_lookup "full"
        ;;
esac

ELAPSED_TIME=$((SECONDS - START_TIME))
echo ""
echo "End of Card Data lookup!"
echo "Elapsed time is - $ELAPSED_TIME seconds"
echo "################################"

# Copy report from /tmp to "$CURRENT_DATE_REPORT_DIR"
cp "$TEMP_REPORT" "$CURRENT_DATE_REPORT_DIR"

# Unmount REPORT_SHARE
if [ "$REMOTE_SHARE" = "yes" ]; then
        if umount "$REPORTS_MOUNT"; then
                echo "Unmounting REMOTE_SHARE - OK!"
                rm -rf "$REPORTS_ROOT"
        else
                echo "Unmountig REMOTE_SHARE - FAILED, check logs."
                exit 0

        fi
fi

rm "$TEMP_REPORT"
